<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: GraphFor__Symfony_Component_Routing_Generator_CompiledUrlGenerator Pages: 1 -->
<svg width="100%" height="100%" viewBox="0.00 0.00 804.00 613.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script type="text/ecmascript"><![CDATA[
/**
 *  SVGPan library 1.2.2
 * ======================
 *
 * Given an unique existing element with id "viewport" (or when missing, the
 * first g-element), including the library into any SVG adds the following
 * capabilities:
 *
 *  - Mouse panning
 *  - Mouse zooming (using the wheel)
 *  - Object dragging
 *
 * You can configure the behaviour of the pan/zoom/drag with the variables
 * listed in the CONFIGURATION section of this file.
 *
 * Known issues:
 *
 *  - Zooming (while panning) on Safari has still some issues
 *
 * Releases:
 *
 * 1.2.2, Tue Aug 30 17:21:56 CEST 2011, Andrea Leofreddi
 *	- Fixed viewBox on root tag (#7)
 *	- Improved zoom speed (#2)
 *
 * 1.2.1, Mon Jul  4 00:33:18 CEST 2011, Andrea Leofreddi
 *	- Fixed a regression with mouse wheel (now working on Firefox 5)
 *	- Working with viewBox attribute (#4)
 *	- Added "use strict;" and fixed resulting warnings (#5)
 *	- Added configuration variables, dragging is disabled by default (#3)
 *
 * 1.2, Sat Mar 20 08:42:50 GMT 2010, Zeng Xiaohui
 *	Fixed a bug with browser mouse handler interaction
 *
 * 1.1, Wed Feb  3 17:39:33 GMT 2010, Zeng Xiaohui
 *	Updated the zoom code to support the mouse wheel on Safari/Chrome
 *
 * 1.0, Andrea Leofreddi
 *	First release
 *
 * This code is licensed under the following BSD license:
 *
 * Copyright 2009-2017 Andrea Leofreddi <a.leofreddi@vleo.net>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Andrea Leofreddi.
 */

"use strict";

/// CONFIGURATION
/// ====>

var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)
var zoomScale = 0.5; // Zoom sensitivity

/// <====
/// END OF CONFIGURATION

var root = document.documentElement;

var state = 'none', svgRoot = null, stateTarget, stateOrigin, stateTf;

setupHandlers(root);

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "handleMouseUp(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
}

/**
 * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
 */
function getRoot(root) {
	if(svgRoot == null) {
		var r = root.getElementById("viewport") ? root.getElementById("viewport") : root.documentElement, t = r;

		while(t != root) {
			if(t.getAttribute("viewBox")) {
				setCTM(r, t.getCTM());

				t.removeAttribute("viewBox");
			}

			t = t.parentNode;
		}

		svgRoot = r;
	}

	return svgRoot;
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (var i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse wheel event.
 */
function handleMouseWheel(evt) {
	if(!enableZoom)
		return;

	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 360; // Chrome/Safari
	else
		delta = evt.detail / -9; // Mozilla

	var z = Math.pow(1 + zoomScale, delta);

	var g = getRoot(svgDoc);
	
	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

        setCTM(g, g.getCTM().multiply(k));

	if(typeof(stateTf) == "undefined")
		stateTf = g.getCTM().inverse();

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(state == 'pan' && enablePan) {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'drag' && enableDrag) {
		// Drag mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(
		evt.target.tagName == "svg"
		|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element
	) {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Drag mode
		state = 'drag';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'drag') {
		// Quit pan mode
		state = '';
	}
}
]]></script>

<g id="viewport" transform="scale(0.5,0.5) translate(0,0)">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(144 469)">
<title>GraphFor__Symfony_Component_Routing_Generator_CompiledUrlGenerator</title>
<polygon fill="white" stroke="none" points="-144,144 -144,-469 660,-469 660,144 -144,144"/>
<text text-anchor="middle" x="258" y="-7.8" font-family="Times New Roman,serif" font-size="14.00">Class \Symfony\Component\Routing\Generator\CompiledUrlGenerator inheritance graph.</text>
<!-- _Symfony_Component_Routing_Generator_CompiledUrlGenerator -->
<g id="node1" class="node"><title>_Symfony_Component_Routing_Generator_CompiledUrlGenerator</title>
<polygon fill="#ede3dc" stroke="#b27540" points="395.5,-325 120.5,-325 120.5,-245 395.5,-245 395.5,-325"/>
<text text-anchor="middle" x="258" y="-308.2" font-family="Times New Roman,serif" font-size="16.00">(class)</text>
<text text-anchor="middle" x="258" y="-290.2" font-family="Times New Roman,serif" font-size="16.00">\Symfony\Component\Routing\Generator</text>
<text text-anchor="middle" x="258" y="-272.2" font-family="Times New Roman,serif" font-size="16.00">CompiledUrlGenerator</text>
<text text-anchor="middle" x="258" y="-254.2" font-family="Times New Roman,serif" font-size="16.00">(links: 2)</text>
</g>
<!-- _Symfony_Component_Routing_Generator_UrlGenerator -->
<g id="node2" class="node"><title>_Symfony_Component_Routing_Generator_UrlGenerator</title>
<polygon fill="#edecea" stroke="#b2ac9f" points="359,-194 157,-194 157,-134 359,-134 359,-194"/>
<text text-anchor="middle" x="258" y="-180.4" font-family="Times New Roman,serif" font-size="12.00">(class)</text>
<text text-anchor="middle" x="258" y="-167.4" font-family="Times New Roman,serif" font-size="12.00">\Symfony\Component\Routing\Generator</text>
<text text-anchor="middle" x="258" y="-154.4" font-family="Times New Roman,serif" font-size="12.00">UrlGenerator</text>
<text text-anchor="middle" x="258" y="-141.4" font-family="Times New Roman,serif" font-size="12.00">(links: 6)</text>
</g>
<!-- _Symfony_Component_Routing_Generator_CompiledUrlGenerator&#45;&gt;_Symfony_Component_Routing_Generator_UrlGenerator -->
<g id="edge1" class="edge"><title>_Symfony_Component_Routing_Generator_CompiledUrlGenerator&#45;&gt;_Symfony_Component_Routing_Generator_UrlGenerator</title>
<path fill="none" stroke="#b27540" stroke-width="2" stroke-dasharray="1,5" d="M258,-244.705C258,-231.671 258,-217.169 258,-204.146"/>
<polygon fill="#b27540" stroke="#b27540" stroke-width="2" points="261.5,-204.075 258,-194.075 254.5,-204.075 261.5,-204.075"/>
<g id="a_edge1&#45;label"><a xlink:title="Extends">
<text text-anchor="middle" x="266.5" y="-215.8" font-family="Times New Roman,serif" font-size="14.00" fill="#b27540">ext</text>
</a>
</g>
</g>
<!-- _Symfony_Component_Routing_Generator_UrlGeneratorInterface -->
<g id="node3" class="node"><title>_Symfony_Component_Routing_Generator_UrlGeneratorInterface</title>
<polygon fill="#edecea" stroke="#b2ac9f" points="249,-83 47,-83 47,-23 249,-23 249,-83"/>
<text text-anchor="middle" x="148" y="-69.4" font-family="Times New Roman,serif" font-size="12.00">(interface)</text>
<text text-anchor="middle" x="148" y="-56.4" font-family="Times New Roman,serif" font-size="12.00">\Symfony\Component\Routing\Generator</text>
<text text-anchor="middle" x="148" y="-43.4" font-family="Times New Roman,serif" font-size="12.00">UrlGeneratorInterface</text>
<text text-anchor="middle" x="148" y="-30.4" font-family="Times New Roman,serif" font-size="12.00">(links: 0)</text>
</g>
<!-- _Symfony_Component_Routing_Generator_UrlGenerator&#45;&gt;_Symfony_Component_Routing_Generator_UrlGeneratorInterface -->
<g id="edge2" class="edge"><title>_Symfony_Component_Routing_Generator_UrlGenerator&#45;&gt;_Symfony_Component_Routing_Generator_UrlGeneratorInterface</title>
<path fill="none" stroke="#b22f00" stroke-width="2" stroke-dasharray="5,2" d="M228.522,-133.79C215.082,-120.472 199.03,-104.566 184.807,-90.4722"/>
<polygon fill="#b22f00" stroke="#b22f00" stroke-width="2" points="187.126,-87.8432 177.559,-83.2906 182.199,-92.8155 187.126,-87.8432"/>
<g id="a_edge2&#45;label"><a xlink:title="Implement">
<text text-anchor="middle" x="222.5" y="-104.8" font-family="Times New Roman,serif" font-size="14.00" fill="#b22f00">impl</text>
</a>
</g>
</g>
<!-- _Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface -->
<g id="node4" class="node"><title>_Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface</title>
<polygon fill="#edecea" stroke="#b2ac9f" points="469,-83 267,-83 267,-23 469,-23 469,-83"/>
<text text-anchor="middle" x="368" y="-69.4" font-family="Times New Roman,serif" font-size="12.00">(interface)</text>
<text text-anchor="middle" x="368" y="-56.4" font-family="Times New Roman,serif" font-size="12.00">\Symfony\Component\Routing\Generator</text>
<text text-anchor="middle" x="368" y="-43.4" font-family="Times New Roman,serif" font-size="12.00">ConfigurableRequirementsInterface</text>
<text text-anchor="middle" x="368" y="-30.4" font-family="Times New Roman,serif" font-size="12.00">(links: 0)</text>
</g>
<!-- _Symfony_Component_Routing_Generator_UrlGenerator&#45;&gt;_Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface -->
<g id="edge3" class="edge"><title>_Symfony_Component_Routing_Generator_UrlGenerator&#45;&gt;_Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface</title>
<path fill="none" stroke="#b22f00" stroke-width="2" stroke-dasharray="5,2" d="M287.478,-133.79C300.918,-120.472 316.97,-104.566 331.193,-90.4722"/>
<polygon fill="#b22f00" stroke="#b22f00" stroke-width="2" points="333.801,-92.8155 338.441,-83.2906 328.874,-87.8432 333.801,-92.8155"/>
<g id="a_edge3&#45;label"><a xlink:title="Implement">
<text text-anchor="middle" x="332.5" y="-104.8" font-family="Times New Roman,serif" font-size="14.00" fill="#b22f00">impl</text>
</a>
</g>
</g>
</g>

</g>
</svg>
